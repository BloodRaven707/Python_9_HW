import random


from aiogram import types, Dispatcher



import bot_data
import candies
from logger import log
from user import users, check_user
from user_kb import kb


# #
# –°–¥–µ–ª–∞—Ç—å –ø–æ—Ç–æ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –º–µ–Ω—é, –≤–º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
# #


# /start –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥—Ä—É–≥–∏–µ
async def command_start( message: types.Message ):
    user_id = message.from_user.id
    await log( "handlers", "command_start", f"{ user_id }: { message.text }" )

    user_name = message.from_user.full_name
    if await check_user( user_id, "game_mode" ) == True:
        await message.answer( f"{ user_name }, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–∏—Ç–µ –∏–∑ –∏–≥—Ä—ã > /stop" )
    await message.answer( f"{ user_name }{ bot_data.main_menu }", reply_markup=kb )


# async def candies( message: types.Message ):  # /candies game
#   if len( message.text.split() ) == 1 or message.text.split()[1] == game:
#
#   if message.text.split()[1] == rules:
#       await message.answer( f"{ bot_data.rules }" )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /candies_game # –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ /candies game - –≤—ã–∑–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
async def candies_game( message: types.Message ):  # /candies game
    user_id = message.from_user.id
    await log( __name__, "candies_game", f"{ user_id }: { message.text }" )

    if await check_user( user_id, "game_mode" ) == False:
        users[ user_id ][ "game_mode" ] = True  # candies_mode = True
        await candies.new_game( message )
    elif message.text.isdigit():
        if await candies.player( message ):
            users[ user_id ][ "game_mode" ] = False
    else:
        await message.answer( "–í—ã –¥–æ–ª–∂–Ω—ã –≤–∑—è—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 –∏ –Ω–µ –±–æ–ª–µ–µ 28 –∫–æ–Ω—Ñ–µ—Ç..." )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /candies_rules  # –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ /candies rules - –≤—ã–∑–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
async def candies_rules( message: types.Message ):
    user_id = message.from_user.id
    await log( __name__, "candies_rules", f"{ user_id }: { message.text }" )

    await message.answer( f"{ bot_data.rules }", reply_markup=kb  )


# –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
async def stop_game( message: types.Message ):
    user_id = message.from_user.id
    await log( __name__, "stop_game", f"{ user_id }: { message.text }" )

    if await check_user( user_id, "game_mode" ) == True:
        users[ user_id ][ "game_mode" ] = False

        await message.answer( "–ñ–∞–ª—å, —á—Ç–æ —Ç—ã —É–∂–µ —É—Ö–æ–¥–∏—à—å üò¢...", reply_markup=kb )
        await command_start( message )

    else:
        await message.answer( "–í—ã —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ –≤ –∏–≥—Ä—É...", reply_markup=kb )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def not_command( message: types.Message ):
    user_id = message.from_user.id
    await log( __name__, "not_command", f"{ user_id }: { message.text }" )

    if await check_user( user_id, "game_mode" ) == True and message.text.isdigit(): # if candies_mode:
        await candies_game( message )
    else:
        await message.answer( f"–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å: \"{message.text}\"" )


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler( command_start, commands=[ "start", "—Å—Ç–∞—Ä—Ç", "help", "–ø–æ–º–æ—â—å", "menu", "–º–µ–Ω—é" ] )

    dp.register_message_handler( candies_game,  commands=[ "candies_game", "candies", "sweets", "–∫–æ–Ω—Ñ–µ—Ç—ã", "game", "–∏–≥—Ä–∞", "–∏–≥—Ä–∞—Ç—å" ] )
    dp.register_message_handler( candies_rules, commands=[ "candies_rules", "rules", "–ø—Ä–∞–≤–∏–ª–∞" ] )

    dp.register_message_handler( stop_game,     commands=[ "stop", "—Å—Ç–æ–ø", "–≤—ã–π—Ç–∏" ] )

    dp.register_message_handler( not_command )
