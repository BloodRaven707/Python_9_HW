from random import choice, randint

from aiogram import types

import bot_data
from logger import log
from user_kb import kbs

# #
# –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏: 1 –∏ 28 –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–µ—Ç
# –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏: /rules (–ø—Ä–∞–≤–∏–ª–∞) –∏ /stop_game (–≤—ã—Ö–æ–¥)
# –î–æ—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞ - –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏...
# #

_module_name = "candies"
users_candies = {}


# –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
async def new_game( message: types.Message ) -> int:
    user_id = message.from_user.id
    await log( __name__, "new_game", f"{ user_id }: { message.text }" )

    users_candies[ user_id ] = {}
  # users_candies[ user_id ][ "start_count" ] = 300
  # users_candies[ user_id ][ "max_taken" ] = 30
    users_candies[ user_id ][ "count" ] = 140

    user_name = message.from_user.full_name
    await message.answer( f"{ user_name }, –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å..." \
                          f"–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ > /stop" )
    if choice( [True, False] ) == True:
        await message.answer( f"–ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç { users_candies[ user_id ][ 'count' ] } " \
                              f"–∫–æ–Ω—Ñ–µ—Ç{ declension( users_candies[ user_id ][ 'count' ] )[ 0 ] }\n" \
                              f"{ user_name }, —Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç –≤–æ–∑—å–º–µ—Ç–µ –≤—ã?", reply_markup=kbs )
    else:
        await bot( message )


# –•–æ–¥ –∏–≥—Ä–æ–∫–∞
async def player( message: types.Message ) -> bool:
    user_id = message.from_user.id
    await log( __name__, "player", f"{ user_id }: { message.text }" )

    while True:
        taken = message.text
        if taken.isdigit():
            taken = int( taken )
            if taken > users_candies[ user_id ][ "count" ]:
                await message.answer( f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å { taken } –∫–æ–Ω—Ñ–µ—Ç{ declension( taken )[ 0 ] }, "
                                      f"–Ω–æ –Ω–∞ —Å—Ç–æ–ª–µ –≤—Å–µ–≥–æ { users_candies[ user_id ][ 'count' ] } " \
                                      f"–∫–æ–Ω—Ñ–µ—Ç{ declension( taken )[ 0 ] }.\n"
                                      f"–í–æ–∑—å–º–∏ –ø–æ–º–µ–Ω—å—à–µ, –Ω–µ –∂–∞–¥–Ω–∏—á–∞–π üòÉ", reply_markup=kbs )
                return False
            elif taken < 1 or taken > 28:
                if users_candies[ user_id ][ "count" ] > 28: # > 29
                    await message.answer( "–í—ã –¥–æ–ª–∂–Ω—ã –≤–∑—è—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 –∏ –Ω–µ –±–æ–ª–µ–µ 28 –∫–æ–Ω—Ñ–µ—Ç...", reply_markup=kbs )
                else:
                    await message.answer( "–ü–æ–º–Ω–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç —Ç–æ—Ç –∫—Ç–æ –≤–æ–∑—å–º–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ç—ã...", reply_markup=kbs )
                    # await message.answer( "–ü–æ–º–Ω–∏—Ç–µ –≤–∑—è–≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–Ω—Ñ–µ—Ç—É –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ..." ) –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞
                return False
            else:
                break

    if await check_win( message, "player", taken ):
        await log( __name__, "player", f"{ user_id }: –ü–æ–±–µ–¥–∏–ª" )
        return True

    await message.answer( f"–í—ã –±–µ—Ä–µ—Ç–µ { taken } –∫–æ–Ω—Ñ–µ—Ç{ declension( taken )[ 1 ] }\n" \
                          f"–ù–∞ —Å—Ç–æ–ª–µ –æ—Å—Ç–∞–ª–æ—Å—å { users_candies[ user_id ][ 'count' ] } "
                          f"–∫–æ–Ω—Ñ–µ—Ç{ declension( users_candies[ user_id ][ 'count' ] )[ 0 ] }." )

    return await bot( message )


# –•–æ–¥ –±–æ—Ç–∞
async def bot( message: types.Message ) -> bool:
    user_id = message.from_user.id

    user_name = message.from_user.full_name
    if users_candies[ user_id ][ "count" ] <= 28: # 29 –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞
        taken = users_candies[ user_id ][ "count" ] # 29 -1 –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞
    else:
        taken = randint( 1, 28 )

    if await check_win( message, "–ë–æ—Ç", taken ):
        await log( __name__, "player", f"{ user_id }: –ü—Ä–æ–∏–≥—Ä–∞–ª" )
        return True

    await message.answer( f"–ë–æ—Ç –±–µ—Ä–µ—Ç { taken } –∫–æ–Ω—Ñ–µ—Ç{ declension( taken )[ 1 ] }\n" \
                          f"–ù–∞ —Å—Ç–æ–ª–µ –æ—Å—Ç–∞–ª–æ—Å—å { users_candies[ user_id ][ 'count' ] } "
                          f"–∫–æ–Ω—Ñ–µ—Ç{ declension( users_candies[ user_id ][ 'count' ] )[ 0 ] }." )

    await message.answer( f"{ user_name }, —Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–µ—Ç –≤–æ–∑—å–º–µ—Ç–µ –≤—ã?", reply_markup=kbs )
    return False


# –ü—Ä–æ–≤–µ—Ä–∫–∞...
async def check_win( message: types.Message, player: str, taken: int ) -> bool:
    user_id = message.from_user.id

    user_name = message.from_user.full_name
    users_candies[ user_id ][ "count" ] -= taken

    if users_candies[ user_id ][ "count" ] == 0:
        if player == "player":
            await message.answer( f"–í—ã –±–µ—Ä–µ—Ç–µ { taken } –∫–æ–Ω—Ñ–µ—Ç{ declension( taken )[ 1 ] }\n" \
                                  f"\n–ö–æ–Ω—Ñ–µ—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç! "
                                  f"\n{ user_name } –ø–æ–∑—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏...ü§ì"
                                  f"\n\n–ï—â–µ —Ä–∞–∑–æ–∫? > /candies_game")
        else:
            await message.answer( f"–ë–æ—Ç –±–µ—Ä–µ—Ç { taken } –∫–æ–Ω—Ñ–µ—Ç{ declension( taken )[ 1 ] }\n" \
                                  f"–ö–æ–Ω—Ñ–µ—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç! –í—ã–∏–≥—Ä–∞–ª –±–æ—Ç! üòé\n"
                                  f"–ö–∞–∫ –Ω–∞—Å—á–µ—Ç —Ä–µ–≤–∞–Ω—à–∞?:) > /candies_game")

        return True
    else:
        return False


# –ß–∞—Å—Ç–∏—á–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–ª–æ–Ω–µ–Ω–∏–π –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤, –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–ª–∏–∑–∏—Ü–∏–∏ –Ω—É–∂–µ–Ω —Å–ª–æ–≤–∞—Ä—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞
def declension( count: int ) -> str:    # –°–ø–∞—Å–∏–±–æ –ï–ª–µ–Ω–µ –∑–∞ –∏–¥–µ—é...
    count_str = str( count )
    count_len = len( count_str )

    if count_len == 1:
        if count in [ 2, 3, 4 ]:
            return "—ã", "—ã"
        elif count == 1:
            return "–∞", "–∞"

    elif count_str[ -2 ] != "1":
        if count_str[ -1 ] in [ "2", "3", "4" ]:
            return "—ã", "—ã"
        elif count_str[ -1 ] in [ "1" ]:
            return "y" "–∞"
    return "", ""
